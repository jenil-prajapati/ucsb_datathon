name: 99 - Create Issues for team02

env:
  ASN_LINK: https://ucsb-cs156.github.io/f23/lab/team02

on:
  workflow_dispatch:
jobs:

  createOneOffIssues:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Add table to README.md
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Add table to README.md
          body: |
            # Acceptance Criteria:
            - [ ] The README.md has a table at the top like the one shown below
                  indicating which team member is initially taking on
                  which database table, and which is unassigned.
                  
                  ```
                  | Table                       | Team Member  | Github Id     |
                  |-----------------------------|--------------|---------------|
                  | `UCSBDiningCommonsMenuItem` | Alice        | alice33       |
                  | `UCSBOrganization`          | (unassigned) |               |
                  | `RecommendationRequest`     | Bob          | robertg       |
                  | `MenuItemReview`            | Charlie      | gauchocharlie |
                  | `HelpRequest`               | Danielle     | danielle      |
                  | `Articles`                  | Eddie        | eddydp        |
                  ```

      - name: Set up GitHub Pages
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Github Pages
          body: |
            # Acceptance Criteria:
            - [ ] Github Pages is active, using the `gh-pages` branch and the root directory
            - [ ] The main page of the repo has a link to the Github Pages site in the right side bar
            - [ ] The links on the Github Pages site work properly.

            # Details

            See the file  [`docs/github-pages.md`](/ucsb-cs156-f23/STARTER-team02/blob/main/docs/github-pages.md) in the repo for details
      
      - name: Set up Team prod deployment
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Team prod deployment
          body: |
            # Acceptance Criteria:
            - [ ] An app named `team02` is created on this team's dokku server.
            - [ ] An database is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] HTTPS is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The ADMIN_EMAILS are configured for that app.
                  * You should find the ones you need in a pinned post on your team's Slack channel.
                  * Instructions for configuring the variable are here: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Google OAuth is configured for that app.
                  * Instructions for configuring OAuth credentials are here: <https://ucsb-cs156.github.io/topics/oauth/oauth_google_setup.html>
                  * Then you need to use the instructions here to configure the environment variables `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] The main branch is deployed on Dokku at, for example,
                  <https://team02.dokku-xx.cs.ucsb.edu> (substituting your
                  own Dokku instances for xx).
            - [ ] Everyone on the team, and the instructor and TAs, 
                  are all able to login with OAuth and see that they have
                  admin privileges.

            # Details

            See the file  [`docs/dokku.md`](/ucsb-cs156-f23/STARTER-team02/blob/main/docs/dokku.md) in the repo for details.

      - name: Set up Team qa deployment
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Team qa deployment
          body: |
            # Acceptance Criteria:

            - [ ] An app named `team02-qa` is created on this team's dokku server.
            - [ ] An database is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] HTTPS is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The ADMIN_EMAILS are configured for that app.
                  * You should find the ones you need in a pinned post on your team's Slack channel.
                  * Instructions for configuring the variable are here: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Google OAuth is configured for that app.
                  * Instructions for configuring OAuth credentials are here: <https://ucsb-cs156.github.io/topics/oauth/oauth_google_setup.html>
                  * Then you need to use the instructions here to configure the environment variables `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] The main branch is deployed on Dokku at, for example,
                  <https://team02-qa.dokku-xx.cs.ucsb.edu> (substituting your
                  own Dokku instances for xx).
            - [ ] Everyone on the team, and the instructor and TAs, 
                  are all able to login with OAuth and see that they have
                  admin privileges.
                  
           
            # Details

            Set up a separate Dokku instance for QA.  Adapt the instructions from 
            the file [`docs/dokku.md`](/ucsb-cs156-f23/STARTER-team02/blob/main/docs/dokku.md) in the repo.  The QA (quality assurance) instance
            starts with the main branch, but later on, you will be able to deploy
            any branch to this instance. You typically do this when you have a PR
            that is being code reviewed.  You can use the your team's Slack channel
            to coordinate who is deploying what to QA at any given time.


      - name: Adjust links in README.md
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Adjust title and links in README.md
          body: |
            ## Acceptance criteria
            - [ ] The title of the README.md file is changed from `STARTER-team02` to the name of the app (e.g. `team02-f23-6pm-4`)
            - [ ] The README.md file is updated with links to the prod and qa instances on dokku.
            - [ ] The README.md file is updated with any other links as specified in the instructions.
            
            ## Details
            
            See the README.md file in the repo for details.
  
   
      - name: Submit for Grading
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title:  Submit for Grading
          body: |

            This issue should be the very *last* one that the team drags into the "done" column;
            it signifies that the sprint is complete, and that the project is ready for the
            staff to review it for a grade.

            ## Acceptance criteria
  
            - [ ] All PRs have been code reviewed and merged to main
            - [ ] All issues are in the done column 
            - [ ] The `main` branch (after all PRs merged) has been reployed to the dokku instance with the <tt>dokku git:sync team02 <i>url</i> main</tt> and `dokku ps:rebuild team02 ` commands
            - [ ] The assignment has been submitted on Canvas
            
            ## Details
            
            See the assignment description at ${{env.ASN_LINK}} for details.
          
  createIssues:
    needs: [ createOneOffIssues ]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        api: [ "UCSBDiningCommonsMenuItem", "UCSBOrganization", "RecommendationRequest", "MenuItemReview", "HelpRequest" , "Articles"]
      
    steps:
    
      - uses: actions/checkout@v3

      - name: Create personal dokku dev deployment
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: "${{env.name}} - Create personal dokku dev deployment"
          body: |

            The team member that takes on ${{env.name}} as their database table
            should use this issue to track creating their personal dokku
            deployment.
            
            # Acceptance Criteria:
            - [ ] An app named `team02-YOURGITHUBID-dev` is created on this team's dokku server, where
                  `YOURGITHUBID` is your github id.
            - [ ] The app is configured for a database (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] The app is configured for HTTPS (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The app is configured for OAuth (see: [`docs/h2-database.md`](/ucsb-cs156-f23/STARTER-team02/blob/main/docs/h2-database.md))
            - [ ] The `APP_ADMIN_EMAILS` are configured (see: [`docs/environment-variables.md`](/ucsb-cs156-f23/STARTER-team02/blob/main/docs/environment-variables.md))
            - [ ] Initially, the `main` branch is deployed and works properly (later, you will deploy your own branches to this 
                  instance as you test them before merging.)
                        
      - name: Create database table
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Create database table for ${{env.name}}
          body: |

            # Acceptance Criteria:
            
            - [ ] There is an `@Entity` class called ${{env.name}}.java
            - [ ] There is a `@Repository` class called ${{env.name}}Repository.java
            - [ ] When you start up the repo on localhost, you can see the table
                  using the H2 console (see the file [`docs/h2-database.md`](/ucsb-cs156-f23/STARTER-team02/blob/main/docs/h2-database.md) for 
                  instructions.)
            - [ ] When you deploy the app to Dokku, you can see the table
                  using the `dokku postgres:connect team02-db` command
                  (use `\dt` to list the tables)
          

      - name: Create Controller, add GET (index) and POST (create)
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Create `${{env.name}}Controller`, add `GET` (index) and `POST` (create)

          body: |
           

              # Acceptance Criteria:

              - [ ] There is a controller file `${{env.name}}Controller.java`
                in the expected directory.
              - [ ] In `${{env.name}}Controller.java` there is 
                code for a `GET /api/${{env.name}}/all` endpoint 
                that returns a JSON list of all `${{env.name}}`s in the database.
                (We sometimes call this an *index* action since it lists all
                items in the database.)
              - [ ] In `${{env.name}}Controller.java` there is 
                code for a `POST /api/${{env.name}}/post` endpoint
                that can be used to create a new entry in the table. (This
                is a *create* action.)
              - [ ] The Swagger-UI endpoints for these are well documented so that
                any member of the team can understand what they are for and
                how to use them.
              - [ ] The `POST` endpoint works as expected, in the sense that new
                records can be added to the database (on localhost).
              - [ ] The `GET` endpoint works as expected, in the sense that the new
                records that are added show up (on localhost).
              - [ ] The `GET` and `POST` endpoints work as expected when the 
                app is deployed to Dokku.
              - [ ] There is full test coverage (Jacoco) for the methods in 
                `${{env.name}}Controller.java`
              - [ ] There is full mutation test coverage (Pitest) for the methods in
                `${{env.name}}Controller.java`




      - name:  Add `GET` (show) endpoint for a single record in table
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Add `GET` (show) endpoint for a single record in ${{env.name}} table

          body: |
           
            Add `GET` (show) endpoint for a single record in ${{env.name}} table

            # Acceptance Criteria:
            
            - [ ] In `${{env.name}}Controller.java` there is code for an 
                  endpoint `GET /api/${{env.name}}?id=123` endpoint 
                  that returns the JSON of the database record with id 123 if it
                  exists, or a 400 and the error message `id 123 not found` if it
                  does not.
            - [ ] The Swagger-UI endpoints for this endpoint is well documented
                  so that any member of the team can understand how to use it.
            - [ ] The endpoint works as expected on localhost.
            - [ ] The endpoint works as expected when deployed to Dokku.
            - [ ] There is full test coverage (Jacoco) for the new code in 
                  `${{env.name}}Controller.java`
            - [ ] There is full mutation test coverage (Pitest) for new code in
                  `${{env.name}}Controller.java`
            
            
        


      - name: Add `PUT` (edit) endpoint for a single record in table

        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Add `PUT` (edit) endpoint for a single record in ${{env.name}} table

          body: |

            Add `PUT` (edit) endpoint for a single record in ${{env.name}} table

            Note that it is a good idea to implement `GET` for a single item
            first; when using `PUT` manually, it's convenient to be able to copy/paste the JSON representation of the data and then edit it in the swagger interface.
            
            Eventually, it's typically the case that in order to populate an edit
            form in the front end, you first do a `GET` on a particular item, 
            and use that JSON to populate the fields in a form.  You can send the
            JSON representation of the new item to the backend.
            
            # Acceptance Criteria:
            
            - [ ] In `${{env.name}}Controller.java` there is code for an 
                  endpoint `PUT /api/${{env.name}}?id=123` endpoint 
                  that accepts JSON for a new set of values for the database
                  fields other than `id`, and updates the values of those fields.
            - [ ] The Swagger-UI endpoints for this endpoint is well documented
                  so that any member of the team can understand how to use it.
            - [ ] The endpoint works as expected on localhost.
            - [ ] The endpoint works as expected when deployed to Dokku.
            - [ ] There is full test coverage (Jacoco) for the new code in 
                  `${{env.name}}Controller.java`
            - [ ] There is full mutation test coverage (Pitest) for new code in
                  `${{env.name}}Controller.java`
            


      - name: Add `DELETE` endpoint for a specific record in table
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          title: Add `DELETE` endpoint for a specific record in ${{env.name}} table.

          body: |

            Add `DELETE` endpoint for a specific record in ${{env.name}} table.

            # Acceptance Criteria:
            
            - [ ] In `${{env.name}}Controller.java` there is code for an 
                  endpoint `DELETE /api/${{env.name}}?id=123` endpoint 
                  that deletes the record if it exists, and returns 200 (ok) and 
                  the text `record 123 deleted`, or returns 404 (Not Found) and
                  the text `record 123 not found` if it does not.
            - [ ] The Swagger-UI endpoints for this endpoint is well documented
                  so that any member of the team can understand how to use it.
            - [ ] The endpoint works as expected on localhost.
            - [ ] The endpoint works as expected when deployed to Dokku.
            - [ ] There is full test coverage (Jacoco) for the new code in 
                  `${{env.name}}Controller.java`
            - [ ] There is full mutation test coverage (Pitest) for new code in
                  `${{env.name}}Controller.java`
            
            
          
